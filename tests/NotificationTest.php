<?php
/**
 * Created by PhpStorm.
 * User: ps
 * Date: 19/10/18
 * Time: 02:10 PM
 */

namespace Punksolid\Wialon\Tests;
use Orchestra\Testbench\TestCase;
use Punksolid\Wialon\ControlType;
use Punksolid\Wialon\Geofence;
use Punksolid\Wialon\Notification;
use Punksolid\Wialon\NotificationType;
use Punksolid\Wialon\Resource;
use Punksolid\Wialon\Unit;
use Punksolid\Wialon\Wialon;


class NotificationTest extends TestCase
{
    /**
     * @return array
     * @throws \Punksolid\Wialon\WialonErrorException
     */
    public function getBasics(): array
    {
        $units = Unit::all()->take(2);
        // $resource = Resource::findByName('punksolid@twitter.com');
        $resource = Resource::all()->first();
        if ($resource) {
            dump("encontrÃ³ resource");

        }
        return array($units, $resource);
    }

    /**
     * Define environment setup.
     *
     * @param  \Illuminate\Foundation\Application $app
     * @return void
     */
    protected function getEnvironmentSetUp($app)
    {
        $app['config']->set('services.wialon.token', '5dce19710a5e26ab8b7b8986cb3c49e58C291791B7F0A7AEB8AFBFCEED7DC03BC48FF5F8');
    }
    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub


    }



    public function test_list_notifications()
    {

        $notifications = Notification::all();
        // Attributes especific to notifications
        $this->assertObjectHasAttribute("id", $notifications->first(), "Unit has id");
        $this->assertObjectHasAttribute("name", $notifications->first(), "Unit has measure units");
        $this->assertObjectHasAttribute("nm", $notifications->first(), "Unit has measure units");
        $this->assertObjectHasAttribute("control_type", $notifications->first(), "Unit has name");
        $this->assertObjectHasAttribute("actions", $notifications->first(), "Unit has  superclass ID: avl_unit");
        $this->assertObjectHasAttribute("text", $notifications->first(), "Unit has uacl current user access level for unit");
        $this->assertObjectHasAttribute("resource", $notifications->first(), "Unit has uacl current user access level for unit");

    }

    public function test_create_notification_by_speed_fixed_speed_limit()
    {
        list($units, $resource) = $this->getBasics();
        $min_speed = 0;
        $max_speed = 60;
        $control_type = new ControlType('speed', [
            'max_speed' => $max_speed,
            'min_speed' => $min_speed]);

        $notification = Notification::make(
            $resource,
            $units,
            $control_type,
            "Velocity Check"
        );

        $this->assertEquals("Velocity Check",$notification->name);

    }

    public function test_create_notification_by_SOS_panic_button()
    {
        list($units, $resource) = $this->getBasics();

        $control_type = new ControlType('panic_button');

        $notification = Notification::make(
            $resource,
            $units,
            $control_type,
            "PanicButton"
        );

        $this->assertEquals("PanicButton",$notification->n);

    }

    public function test_create_notification_by_parameter_in_message()
    {

    }

    public function test_create_notification_by_connection_loss()
    {

    }

    public function test_create_notification_by_SMS()
    {

    }

    public function test_create_notification_by_address()
    {

    }

    public function test_create_notification_by_fuel_filling()
    {

    }

    public function test_create_notification_by_driver()
    {

    }

    public function test_create_notification_by_passenger_alarm()
    {

    }

    public function test_create_notification_by_geofence()
    {
        list($units, $resource) = $this->getBasics();

        $geofence = Geofence::findByName("my_geofence");

        $control_type = new ControlType('geofence', $geofence);

        $notification = Notification::make(
            $resource,
            $units,
            $control_type,
            "MiNotificacion101"
        );

        $this->assertEquals("MiNotificacion101",$notification->n);

    }

    public function test_create_notification_by_digital_input()
    {

    }

}