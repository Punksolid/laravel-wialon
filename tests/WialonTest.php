<?php

namespace Punksolid\Wialon\Tests;

use App\Http\Resources\UsersResource;
use App\User;
use Faker\Factory;
use Orchestra\Testbench\TestCase;
use Punksolid\Wialon\Geofence;
use Punksolid\Wialon\Notification;
use Punksolid\Wialon\Resource;
use Punksolid\Wialon\Unit;
use Punksolid\Wialon\Wialon;

/**
 *  Corresponding Class to test YourClass class
 *
 *  For each class in your library, there should be a corresponding Unit-Test for it
 *  Unit-Tests should be as much as possible independent from other test going on.
 *
 * @author yourname
 */
class WialonTest extends TestCase
{

    /**
     * Define environment setup.
     *
     * @param  \Illuminate\Foundation\Application $app
     * @return void
     */
    protected function getEnvironmentSetUp($app)
    {
        // Setup default database to use sqlite :memory:
//        $app['services']->set('database.default', 'testbench');

        $app['config']->set('services.wialon.token', '11b6e71f234078f1ca9e6944705a235bB6C1D1F551E3E263783A2354A63236306018E83E');
    }

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub


    }

    /**
     * Just check if the YourClass has no syntax error
     *
     * This is just a simple check to make sure your library has no syntax error. This helps you troubleshoot
     * any typo before you even use this library in a real project.
     *
     */
    public function test_simple_connection_make_login()
    {
        $wialon_token = config("services.wialon.token", "5dce19710a5e26ab8b7b8986cb3c49e58C291791B7F0A7AEB8AFBFCEED7DC03BC48FF5F8");

        $wialon_api = new Wialon();
        $result = $wialon_api->login($wialon_token);
        $json = json_decode($result, true);

        if (!isset($json['error'])) {
            echo $wialon_api->core_search_item('{"id":717361,"flags":"0x1"}');
            $wialon_api->logout();
        } else {
            echo \Punksolid\Wialon\WialonError::error($json['error']);
        }

        $this->assertArrayHasKey("eid", $json);
        $this->assertArraySubset(["th" => $wialon_token], $json, "Makes login and retrieves eid");

    }


    function getData2()
    {
        $wialon_conn = new Wialon();
        $arregloItemByProp = array('spec' => array('itemsType' => 'avl_unit',
            'propName' => 'sys_name',
            'propValueMask' => '*',
            'sortType' => 'sys_name',
            'propType' => 'property'
        ),
            'force' => 1,
            'flags' => 5129,
            'from' => 0,
            'to' => 0);
        $arregloProperties = $wialon_conn->core_search_items(json_encode($arregloItemByProp) . "&sid=" . $this->sid);
        //echo 'ARRAY: '.$arregloProperties.'<br>';
        $dataReturn = json_decode($arregloProperties, true);
        return $dataReturn;
    }

    public function test_get_user_name()
    {
        $wialon_api = new \Punksolid\Wialon\Wialon();
        $result = $wialon_api->login("5dce19710a5e26ab8b7b8986cb3c49e58C291791B7F0A7AEB8AFBFCEED7DC03BC48FF5F8");
        $result = json_decode($result);
        $mi_user = new \Punksolid\Wialon\User($result->user);

        $this->assertEquals("SdkDemo", $mi_user->nm);

    }

    public function test_create_unit()
    {
        $api_wialon = new Wialon();

        $unit = $api_wialon->createUnit(
            "BicicletaChema"
        );

        $this->assertObjectHasAttribute("id", $unit, "Unit has id");
        $this->assertObjectHasAttribute("mu", $unit, "Unit has measure units");
        $this->assertObjectHasAttribute("nm", $unit, "Unit has name");
        $this->assertObjectHasAttribute("cls", $unit, "Unit has  superclass ID: avl_unit");
        $this->assertObjectHasAttribute("uacl", $unit, "Unit has uacl current user access level for unit");

    }


    public function test_destroy_unit()
    {
        $api_wialon = new Wialon();

        $unit = $api_wialon->createUnit(
            "Patines22"
        );

        $this->assertEquals(true, $api_wialon->destroyUnit($unit));
    }


}
