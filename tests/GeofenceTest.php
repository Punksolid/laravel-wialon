<?php
/**
 * Created by PhpStorm.
 * User: ps
 * Date: 19/10/18
 * Time: 01:12 PM
 */

namespace Punksolid\Wialon\Tests;

use Faker\Factory;
use function GuzzleHttp\Psr7\str;
use Orchestra\Testbench\TestCase;
use Punksolid\Wialon\Geofence;
use Punksolid\Wialon\Resource;


class GeofenceTest extends TestCase
{


    /**
     * Define environment setup.
     *
     * @param  \Illuminate\Foundation\Application $app
     * @return void
     */
    protected function getEnvironmentSetUp($app)
    {
        $app['config']->set('services.wialon.token', '5dce19710a5e26ab8b7b8986cb3c49e58C291791B7F0A7AEB8AFBFCEED7DC03BC48FF5F8');
    }
    protected function setUp():void
    {
        parent::setUp(); // TODO: Change the autogenerated stub


    }

    public function test_find_geofence_by_name()
    {

        $geofence = Geofence::findByName("my_geofence");

        $this->assertEquals("my_geofence", $geofence->n);
    }


    /**
     * Some coordinates returns invalid input.
     */
    public function test_create_geofence()
    {
        $faker = Factory::create();

        $resource = Resource::findByName('punksolid@twitter.com');

        $lat = -48.742468;
        $lon = -68.668435;
        $lat = (string)$lat;
        $lon = (string)$lon;

        $geofence = Geofence::make(
            $resource->id,
            '1awesome1geofence4',
            $lat,
            $lon,
            $faker->numberBetween(800, 1100),
            3);

        $this->assertObjectHasAttribute("n", $geofence, "Geofence has name");
        $this->assertObjectHasAttribute("d", $geofence, "Geofence has description");
        $this->assertObjectHasAttribute("id", $geofence, "Geofence has id");
        $this->assertObjectHasAttribute("f", $geofence, "Geofence has flags");
        $this->assertObjectHasAttribute("t", $geofence, "Geofence has type specification");
        $this->assertObjectHasAttribute("e", $geofence, "Geofence has checksum");
        $this->assertObjectHasAttribute("b", $geofence, "Geofence has configuration attributes");

    }

    public function test_find_geofence_by_id()
    {
        $faker = Factory::create();

        $resource = Resource::findByName('punksolid@twitter.com');
        $lat = (string)-48.742468;
        $lon = (string)-68.668435;

        $geofence = Geofence::make(
            $resource->id,
            $faker->word . $faker->unique()->word,
            $lat,
            $lon,
            $faker->numberBetween(800, 1100),
            3);

        $new_geofence = Geofence::findById($geofence->id, $resource->id);

        $this->assertEquals($geofence->n, $new_geofence->n);
    }
}